Reporting of experiments: It is provided in report.pdf file

This README provides detailed instructions for setting up, compiling, and testing a web server built with CivetWeb. Server performance is evaluated using a custom load generation script, which measures throughput and generates visualizations.

Prerequisites

1. Download civetweb
2. Compile CivetWeb according to the instructions provided in the repository and ensure it is accessible globally.
3. Verify that the CivetWeb library is available for linking during server compilation (using the `-lcivetweb` flag).

Additional Dependencies

1. gcc: Required for compiling the server code.
2. Apache Benchmark (ab): Used to generate load and measure server performance.
3. matplotlib: For visualizing performance plots generated by loadgen.sh.

Instructions for Part 5a: Basic Server Execution

1. Compile the Server, Run the following command to compile the server:
gcc flask.c functions.c -o flask -lcivetweb

2. Run the Server, To start the server, use the following command:
./flask <PORT> <THREAD_POOL_SIZE>

Replace <PORT> with the desired port number (e.g., 9999) and <THREAD_POOL_SIZE> with the number of threads (e.g., 5).

Instructions for Part 5b: Load Generation and Data Collection

1. Compile the server as outlined in Part 5a:
gcc flask.c functions.c -o flask -lcivetweb

2. Prepare the Load Generation Script and you must create a folder name plots in the current directory only.

- Make the Script Executable: The loadgen.sh script is used for automated load testing. Ensure it has execute permissions:
chmod +x loadgen.sh

- Execute the Load Generation Script
./loadgen.sh

This script will:
- Execute load tests with varying thread pool sizes and concurrent request levels.
- Generate data files and plots for each test configuration.

3. Output Files: The loadgen.sh script will create a folder named plot that contains:
- Data Files: Raw data files with throughput results for each load test configuration.
- Plot Files: Generated plots that visualize the server performance under various loads.

Notes on loadgen.sh
- Ensure CivetWeb and ab (Apache Benchmark) are installed and accessible.
- Modify the script to change parameters such as the number of requests, concurrency levels, and thread pool sizes if needed.
